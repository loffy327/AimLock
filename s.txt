
#include <iostream>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string>

struct Vector3 {
    float x, y, z;
    Vector3 operator-(const Vector3& o) const { return {x-o.x, y-o.y, z-o.z}; }
    Vector3 operator+(const Vector3& o) const { return {x+o.x, y+o.y, z+o.z}; }
    Vector3 operator*(float s) const { return {x*s, y*s, z*s}; }
    float length() const { return std::sqrt(x*x + y*y + z*z); }
};

struct Player {
    std::string name;
    Vector3 pos;
    Vector3 vel;
    float hp;
    bool alive;
    bool visible;
};

struct Camera {
    Vector3 angle;
};

float radToDeg(float rad) { return rad*180.0f/3.14159265f; }

Vector3 predictPosition(const Vector3& pos, const Vector3& vel, float dt) {
    return pos + vel*dt;
}

Vector3 calculateAngle(const Vector3& src, const Vector3& dst) {
    Vector3 delta = dst - src;
    float dist = delta.length();
    float pitch = std::asin(delta.y/dist)*180.0f/3.14159265f;
    float yaw = std::atan2(delta.x, delta.z)*180.0f/3.14159265f;
    return {pitch, yaw, 0};
}

Vector3 smoothAngle(const Vector3& current, const Vector3& target, float alpha) {
    return { current.x + (target.x-current.x)*alpha,
             current.y + (target.y-current.y)*alpha,
             current.z + (target.z-current.z)*alpha };
}

bool inFOV(const Vector3& cam, const Vector3& target, float fov) {
    return std::fabs(cam.x-target.x)<=fov/2.0f && std::fabs(cam.y-target.y)<=fov/2.0f;
}

Vector3 compensateRecoil(const Vector3& angle, const Vector3& recoil) {
    return { angle.x - recoil.x, angle.y - recoil.y, angle.z };
}

bool triggerBot(const Vector3& cam, const Vector3& target, float thres=1.0f) {
    return std::fabs(cam.x-target.x)<=thres && std::fabs(cam.y-target.y)<=thres;
}

void shoot(Player& target) { target.hp -= 10; if(target.hp<=0) target.alive=false; }

class EnemyManager {
public:
    std::vector<Player> enemies;
    void spawnEnemies(int count){
        for(int i=0;i<count;i++){
            Player e;
            e.name="Enemy"+std::to_string(i);
            e.pos={float(rand()%200-100), float(rand()%20), float(rand()%200-100)};
            e.vel={float(rand()%5-2),0,float(rand()%5-2)};
            e.hp=float(rand()%100+1);
            e.alive=true;
            e.visible=(rand()%100>20);
            enemies.push_back(e);
        }
    }
    void updatePositions(float dt){
        for(auto& e: enemies){
            e.pos = e.pos + e.vel*dt;
            if(rand()%50==0) e.vel = {float(rand()%5-2),0,float(rand()%5-2)};
        }
    }
};

class Aimbot {
public:
    float FOV;
    float smoothing;
    Aimbot(float fov=90.0f,float smooth=0.2f):FOV(fov),smoothing(smooth){}

    int selectTarget(const Player& me, Camera& cam, std::vector<Player>& enemies){
        int best=-1;
        float minDiff=1e6f;
        for(size_t i=0;i<enemies.size();i++){
            if(!enemies[i].alive || !enemies[i].visible) continue;
            Vector3 predicted = predictPosition(enemies[i].pos, enemies[i].vel,0.1f);
            Vector3 ang = calculateAngle(me.pos,predicted);
            if(!inFOV(cam.angle,ang,FOV)) continue;
            float diff = std::fabs(cam.angle.x-ang.x)+std::fabs(cam.angle.y-ang.y);
            if(diff<minDiff){ minDiff=diff; best=i; }
        }
        return best;
    }

    void aim(Player& me, Camera& cam, std::vector<Player>& enemies){
        int idx = selectTarget(me,cam,enemies);
        if(idx==-1) return;
        Player& t = enemies[idx];
        Vector3 pred = predictPosition(t.pos,t.vel,0.1f);
        Vector3 angle = calculateAngle(me.pos,pred);
        Vector3 recoil = { ((rand()%100)/100.0f)*2.0f, ((rand()%100)/100.0f)*2.0f,0 };
        angle = compensateRecoil(angle,recoil);
        cam.angle = smoothAngle(cam.angle,angle,smoothing);
        if(triggerBot(cam.angle,angle)) shoot(t);
    }
};

class GameSimulator {
public:
    Player me;
    Camera cam;
    EnemyManager enemyManager;
    Aimbot aimbot;

    GameSimulator():me({"Me",{0,0,0},{0,0,0},100,true,true}),cam({0,0,0}),aimbot(90.0f,0.2f){}

    void run(int ticks=100){
        enemyManager.spawnEnemies(60);
        for(int t=0;t<ticks;t++){
            aimbot.aim(me,cam,enemyManager.enemies);
            enemyManager.updatePositions(0.1f);
        }
    }
};

int main(){
    srand(time(0));
    GameSimulator sim;
    sim.run(100);
    return 0;
}
